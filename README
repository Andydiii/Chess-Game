A chess program developed in C++ that supports both graphical and text rendering.
- Collaborated with a team to develop a chess program in accordance with the MVC (Model View Controller) design pattern, effectively assigning responsibilities to the board class, chess class, and player class.
- Implemented the observer pattern to enable text and graphical displays, notifying observers of board updates and ensuring a synchronized user experience.
- Developed various player types, including human and robot players, each with distinct move decision algorithms based on the project specifications.
- Utilized an abstract piece class and its subclasses to handle the unique movement patterns of different chess pieces, accommodating special moves such as castling, en passant, and promotion.
- Implemented an undo feature by storing previous board states and allowing players to revert their last move, enhancing the gameplay experience and providing flexibility.
- Demonstrated adaptability and resilience to change by designing the program to easily accommodate variations, such as four-handed chess, through modifications to the board size, boundaries, player count, and game rules.
- Leveraged object-oriented principles to ensure low coupling and high cohesion, facilitating code maintenance and scalability.
- Successfully integrated extra credit features, such as optimized Xwindow board rendering, smart pawn promotion for checkmate, and handling game results in a draw when only two kings remain.
- Gained valuable experience working in a team, emphasizing the importance of clear communication, planning, and adherence to design patterns.
- Reflecting on the project, identified areas for improvement, including earlier consideration of special cases and fine-tuning the implementation of robot player levels.
